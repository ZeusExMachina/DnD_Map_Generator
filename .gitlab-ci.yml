# 3 Stages to run through
stages:
  - Build
  - Test
  - Deploy

# Uses the node docker image for JS applications
image: node:alpine

#Changes directory from home to the code directory
before_script:
  - cd code/dungeons-and-dragons-app
  - npm install -g firebase-tools

# Perform the 3 stages
build:
  stage: Build
  tags:
    - shell
  script:
    - echo "Building stage 1/1"
  allow_failure: false

# Boosts performance
cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ~/.npm

unit_testing:
  stage: Test
  tags:
    - shell
  script:
    - echo "Testing stage 1/1"
    - yarn add jest-expo
    - npx jest --ci
  allow_failure: false

deploy:
  stage: Deploy
  tags:
    - shell
  script:
    - echo "Deployment stage 1/1"
    - npm install -g firebase-tools
    - firebase use dungeon-in-a-jiffy-e9931 --token $FIREBASE_TOKEN
    - yarn
    - yarn build
  only:
    refs:
      - master
    changes:
      - code/dungeons-and-dragons-app/**/*
  allow_failure: true

staging:
  stage: Deploy
  before_script:
  - npm install -g firebase-tools
  - firebase use dungeon-in-a-jiffy-e9931 --token $FIREBASE_TOKEN
  - yarn
  - yarn build
  only:
    - master
  script:
    - firebase deploy -m "Pipe $CI_PIPELINE_ID Build $CI_BUILD_ID" --only hosting:FIREBASE_TOKEN --non-interactive --token $FIREBASE_TOKEN

production:
  stage: Deploy
  before_script:
  - npm install -g firebase-tools
  - firebase use dungeon-in-a-jiffy-e9931 --token $FIREBASE_TOKEN
  - yarn
  - yarn build
  only:
    - master
  when: manual
  allow_failure: false
  script:
    - firebase deploy -m "Pipe $CI_PIPELINE_ID Build $CI_BUILD_ID" --only hosting:FIREBASE_TOKEN --non-interactive --token $FIREBASE_TOKEN


