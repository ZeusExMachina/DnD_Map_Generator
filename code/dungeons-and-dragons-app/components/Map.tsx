import React from "react";
import { roomGen } from "../utility/roomGen"

interface mapProps {
    images: JSX.Element[]
}

export default function map(props: mapProps) {

    const mapStyle = function (width: number, height: number) {
        return {
            margin: 'auto',
            display: 'grid',
            gridTemplateColumns: 'repeat(' + width + ',max-content)',
            gridTemplateRows: 'repeat(' + height + ',max-content)',
            gridGap: '0px'

        }
    }

    var mapGrid: number[][] = [
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    ]

    var room: number[][] = [
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
    ]

    //===
    //Copy and paste predefined rooms
    // const room1 : number[][] = [ //enterance
    //     [10,10,10,10,10,10,10,10,10,10,10,10],
    //     [10,10,10,10,10,10,10,10,1,8,8,8],
    //     [8,8,8,8,8,8,8,8,8,9,9,8],
    //     [9,9,9,9,9,9,9,9,9,9,9,8],
    //     [9,9,9,9,9,9,9,9,9,8,9,9],
    //     [8,8,8,8,8,8,9,8,8,9,9,8],
    //     [10,10,10,10,8,9,9,9,9,9,9,8],
    //     [10,10,10,10,8,9,9,9,9,9,9,8],
    //     [10,10,10,10,8,9,8,8,8,8,8,8]
    // ]

    // const room2 : number[][] = [
    //     [10,10,8,8,8,8,8,8,8,8,8,10],
    //     [10,10,8,9,9,9,9,9,9,9,8,10],
    //     [10,10,8,9,9,9,9,9,9,9,8,10],
    //     [8,8,8,9,9,9,9,9,9,9,8,10],
    //     [9,9,9,9,9,9,9,9,9,9,8,8],
    //     [8,8,8,9,9,9,9,9,9,9,9,9],
    //     [10,10,8,9,9,9,9,9,9,9,9,9],
    //     [10,10,8,9,9,9,9,9,9,9,8,8],
    //     [10,10,8,8,8,9,9,8,8,8,8,10],
    // ]

    // const room3 : number[][] = [
    //     [10,10,10,10,10,10,10,10],
    //     [10,10,10,10,8,8,8,8],
    //     [8,8,8,8,8,9,9,8],
    //     [8,9,9,9,9,9,9,8],
    //     [8,9,9,9,9,9,9,8],
    //     [9,9,8,8,8,9,9,8],
    //     [9,9,8,10,8,9,9,8],
    //     [8,8,8,10,8,9,9,8],
    //     [10,10,10,10,8,8,8,8]
    // ]

    // const room4 : number[][] = [ //exit
    //     [10,8,8,8,8,8,8,10],
    //     [10,8,9,9,9,9,8,10],
    //     [10,8,9,9,9,9,8,10],
    //     [10,8,9,8,8,8,8,10],
    // ]

    // const room5 : number[][] = [
    //     [10, 10, 10, 9, 10, 10, 10, 10],
    //     [10, 9, 9, 9, 9, 9, 9, 10],
    //     [10, 9, 9, 9, 9, 10, 9, 10],
    //     [10, 9, 9, 9, 9, 10, 10, 10],
    //     [10, 10, 10, 10, 9, 10, 10, 10]
    // ]

    // const room6 : number[][] = [
    //     [10,10,10,10,8,9,8,10,10,10,10,10],
    //     [10,8,8,8,8,9,8,8,8,8,10,10],
    //     [10,8,9,9,9,9,9,9,9,8,10,10],
    //     [10,8,9,8,9,9,9,8,9,8,10,10],
    //     [10,8,9,9,9,9,9,9,9,8,10,10],
    //     [10,8,8,8,8,8,8,8,8,8,10,10],
    //     [10,10,10,10,10,10,10,10,10,10,10,10],
    // ]

    // const room7 : number[][] = [ //Prison Cells     12x9
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    // ]

    // const room8 : number[][] = [ //15x16, incomplete. big open room.
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    // ]

    // const room9 : number[][] = [ //Boss chamber
    //     [10,10,10,10,10,10,10,10,8,9,8,10,10],
    //     [10,10,10,10,10,10,10,10,8,9,8,10,10],
    //     [8,8,8,8,8,8,10,10,8,9,8,10,10],
    //     [9,9,9,9,9,8,10,10,8,9,8,8,8],
    //     [8,8,8,8,9,8,8,8,8,9,9,9,8],
    //     [10,10,10,8,9,9,9,9,9,9,9,9,8],
    //     [10,8,8,8,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,8,8,8],
    //     [10,8,8,8,8,9,9,9,9,8,8,10,10],
    //     [10,10,10,8,8,8,8,8,8,8,10,10,10],
    //     [10,10,10,10,10,10,10,10,10,10,10,10,10],
    //     [10,10,10,10,10,10,10,10,10,10,10,10,10]
    // ]
    // //===

    var routeRoom: number[][] = [
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
    ];

    function addRoom(startLeft: number, startTop: number, width: number, height: number, room: number[][]) {
        var roomLeft = 0;
        var roomTop = 0;
        for (var i = startTop; i < height; i++) {
            for (var j = startLeft; j < width; j++) {
                mapGrid[i][j] = room[roomTop][roomLeft];
                roomLeft++;
            }
            roomLeft = 0;
            roomTop++;
        }
    }
    var rooms: Room[] = [(new Room(0, 0, 10, 10, [0, 0], [0, 0], [0, 0], [0, 0],'NULL',2))]

    var roomX = 0;
    var roomY = 0;
    var roomIndex = 0;

    var exitX = 30
    var exitY = 20
    /* Generates the Path */
    while (roomX <= exitX && roomY <= exitY) {
        var origX = roomX;
        var origY = roomY;
        var southEntrance = [0,4]
        var eastEntrance = [4,0]
        var westEntrance = [4,9]
        var northEntrance = [9,4]
        
        var entrance = 'NULL'
        if(roomX != exitX && roomY != exitY) {
            if(Math.random() >= 0.5) {
                roomX += 10;
                rooms[roomIndex].entrances[0] = eastEntrance;
                entrance = 'EAST'
            } else {
                roomY += 10;
                rooms[roomIndex].entrances[0] = southEntrance;
                entrance = 'SOUTH'
            }
        } else {
            if(roomX == exitX && roomY == exitY) {
                roomY+=10;
            } else if(roomX == exitX) {
                roomY +=10;
                rooms[roomIndex].entrances[0] = southEntrance;
                entrance = 'SOUTH'
            } else {
                roomX +=10;
                rooms[roomIndex].entrances[0] = eastEntrance;
                entrance = 'EAST'
            }
        }
        switch(rooms[roomIndex].entrance) {
            case 'SOUTH':
                rooms[roomIndex].entrances[0] = northEntrance;
                break;
            case 'EAST':
                rooms[roomIndex].entrances[0] = westEntrance;
                break;
        }
        var roomToAdd:Room = new Room(origX,origY,origX+10,origY+10,northEntrance,southEntrance,eastEntrance,westEntrance,entrance,2)
        roomIndex++
        rooms.splice(roomIndex,0,roomToAdd)
    }
    for(var i = 0; i <rooms.length; i++) {
        var currentRoom:Room = rooms[i]

        var r = roomGen(currentRoom.width, currentRoom.height, currentRoom.entrances, 0.4, true);

        addRoom(currentRoom.left,currentRoom.top,currentRoom.width,currentRoom.height,r)
    }
    for(var i = 0; i < mapGrid.length; i++) {
        for(var j = 0; j < mapGrid[i].length; j++) {
            if(mapGrid[i][j] == 10) {
                var south = [0,0]
                var north = [0,0]
                var east = [0,0]
                var west = [0,0]
                
            }
        }
    }

    let pixelDisplay: JSX.Element[][] = []
    function makeImages() {
        mapGrid.forEach(function (e1: number[], index: number) {
            //  row
            let row: JSX.Element[] = []
            e1.forEach(function (e2: number, index2: number) {
                //  col
                // numbers should reference a tile in images
                const imagelink = props.images[e2]
                row.push(imagelink)
            })
            pixelDisplay.push(row)
        })
    }
    return (
        <div id="map" style={mapStyle(40, 25)}>

            {makeImages()}
            {pixelDisplay}
            {/* {text} */}
        </div>
    )
}

class Room {
    left: number
    top: number
    width: number
    height: number
    north: number[];
    south: number[];
    east: number[];
    west: number[];
    entrances: number[][];
    route: number;
    room: number[][] = [
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
    ];
    routeRoom: number[][] = [
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 5, 5, 9, 9, 9, 8],
        [8, 9, 9, 9, 5, 5, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
    ];
    entrance: String
    constructor(startLeft: number, startTop: number, width: number, height: number, northDoor: number[], southDoor: number[], eastDoor: number[], westDoor: number[], originalEntrance: String,route:number) {
        this.north = northDoor;
        this.south = southDoor;
        this.east = eastDoor;
        this.west = westDoor;
        this.left = startLeft;
        this.top = startTop;
        this.width = width;
        this.height = height;
        this.assignEntrances();
        this.entrance = originalEntrance
        this.route = route
        this.entrances = [this.north, this.south, this.east, this.west];
    }

    private assignEntrances() {
        for (var i: number = this.north[0]; i < this.north[1]; i++) {
            if(true) {
                this.routeRoom[0][i] = 9
            } else {
                this.room[0][i] = 9
            }
        }
        for (var i = this.south[0]; i < this.south[1]; i++) {
            if(true) {
                this.routeRoom[9][i] = 9
            } else {
                this.room[9][i] = 9
            }
        }
        for (var i = this.east[0]; i < this.east[1]; i++) {
            if(true) {
                this.routeRoom[i][9] = 9
            } else {
                this.room[i][9] = 9
            }
        }
        for (var i = this.west[0]; i < this.west[1]; i++) {
            if(true) {
                this.routeRoom[i][0] = 9
            } else {
                this.room[i][0] = 9
            }
        }
    }
}