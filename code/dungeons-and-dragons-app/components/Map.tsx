import React from "react";


interface mapProps {
    images: JSX.Element[]
}

export default function map(props:mapProps) {

    const mapStyle = function(width: number, height: number) {
        return {
            margin: 'auto',
            display: 'grid',
            gridTemplateColumns: 'repeat('+width+',max-content)',
            gridTemplateRows: 'repeat('+height+',max-content)',
            gridGap: '0px'

        }
    }

    var mapGrid: number[][] = [
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
    ]

    var room : number[][] = [
        [8,8,8,8,8,8,8,8,8,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,8,8,8,8,8,8,8,8,8],
    ]

    //===
    //Copy and paste predefined rooms
    // const room1 : number[][] = [ //enterance
    //     [10,10,10,10,10,10,10,10,10,10,10,10],
    //     [10,10,10,10,10,10,10,10,1,8,8,8],
    //     [8,8,8,8,8,8,8,8,8,9,9,8],
    //     [9,9,9,9,9,9,9,9,9,9,9,8],
    //     [9,9,9,9,9,9,9,9,9,8,9,9],
    //     [8,8,8,8,8,8,9,8,8,9,9,8],
    //     [10,10,10,10,8,9,9,9,9,9,9,8],
    //     [10,10,10,10,8,9,9,9,9,9,9,8],
    //     [10,10,10,10,8,9,8,8,8,8,8,8]
    // ]

    // const room2 : number[][] = [
    //     [10,10,8,8,8,8,8,8,8,8,8,10],
    //     [10,10,8,9,9,9,9,9,9,9,8,10],
    //     [10,10,8,9,9,9,9,9,9,9,8,10],
    //     [8,8,8,9,9,9,9,9,9,9,8,10],
    //     [9,9,9,9,9,9,9,9,9,9,8,8],
    //     [8,8,8,9,9,9,9,9,9,9,9,9],
    //     [10,10,8,9,9,9,9,9,9,9,9,9],
    //     [10,10,8,9,9,9,9,9,9,9,8,8],
    //     [10,10,8,8,8,9,9,8,8,8,8,10],
    // ]

    // const room3 : number[][] = [
    //     [10,10,10,10,10,10,10,10],
    //     [10,10,10,10,8,8,8,8],
    //     [8,8,8,8,8,9,9,8],
    //     [8,9,9,9,9,9,9,8],
    //     [8,9,9,9,9,9,9,8],
    //     [9,9,8,8,8,9,9,8],
    //     [9,9,8,10,8,9,9,8],
    //     [8,8,8,10,8,9,9,8],
    //     [10,10,10,10,8,8,8,8]
    // ]

    // const room4 : number[][] = [ //exit
    //     [10,8,8,8,8,8,8,10],
    //     [10,8,9,9,9,9,8,10],
    //     [10,8,9,9,9,9,8,10],
    //     [10,8,9,8,8,8,8,10],
    // ]

    // const room5 : number[][] = [
    //     [10, 10, 10, 9, 10, 10, 10, 10],
    //     [10, 9, 9, 9, 9, 9, 9, 10],
    //     [10, 9, 9, 9, 9, 10, 9, 10],
    //     [10, 9, 9, 9, 9, 10, 10, 10],
    //     [10, 10, 10, 10, 9, 10, 10, 10]
    // ]

    // const room6 : number[][] = [
    //     [10,10,10,10,8,9,8,10,10,10,10,10],
    //     [10,8,8,8,8,9,8,8,8,8,10,10],
    //     [10,8,9,9,9,9,9,9,9,8,10,10],
    //     [10,8,9,8,9,9,9,8,9,8,10,10],
    //     [10,8,9,9,9,9,9,9,9,8,10,10],
    //     [10,8,8,8,8,8,8,8,8,8,10,10],
    //     [10,10,10,10,10,10,10,10,10,10,10,10],
    // ]

    // const room7 : number[][] = [ //Prison Cells     12x9
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    // ]

    // const room8 : number[][] = [ //15x16, incomplete. big open room.
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    // ]

    // const room9 : number[][] = [ //Boss chamber
    //     [10,10,10,10,10,10,10,10,8,9,8,10,10],
    //     [10,10,10,10,10,10,10,10,8,9,8,10,10],
    //     [8,8,8,8,8,8,10,10,8,9,8,10,10],
    //     [9,9,9,9,9,8,10,10,8,9,8,8,8],
    //     [8,8,8,8,9,8,8,8,8,9,9,9,8],
    //     [10,10,10,8,9,9,9,9,9,9,9,9,8],
    //     [10,8,8,8,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,8,8,8],
    //     [10,8,8,8,8,9,9,9,9,8,8,10,10],
    //     [10,10,10,8,8,8,8,8,8,8,10,10,10],
    //     [10,10,10,10,10,10,10,10,10,10,10,10,10],
    //     [10,10,10,10,10,10,10,10,10,10,10,10,10]
    // ]
    // //===

    function addRoom(startLeft:number, startTop:number, width:number, height:number, room:number[][]) {
        var roomLeft = 0;
        var roomTop = 0;
        for(var i = startTop; i < height; i++) {
            for(var j = startLeft; j < width; j++) {
                mapGrid[i][j] = room[roomTop][roomLeft];
                roomLeft++;
            }
            roomLeft = 0;
            roomTop++;
        }
    }
    var rooms:Room[] = [(new Room(0,0,10,10,[0,0],[0,0],[5,7],[0,0])),(new Room(30,20,40,30,[5,7],[0,0],[0,0],[0,0]))]

    function makeRooms() {
        
    }

    rooms.forEach(function(e1:Room, index:number) {
        addRoom(e1.left,e1.top,e1.width,e1.height,e1.room)
    })

    let pixelDisplay : JSX.Element[][] = []
    function makeImages() {
        mapGrid.forEach(function(e1 : number[],index : number){
            //  row
            let row : JSX.Element[] = []
            e1.forEach(function(e2:number,index2:number){
                //  col
                // numbers should reference a tile in images
                const imagelink = props.images[e2]
                row.push(imagelink)
            })
            pixelDisplay.push(row)
        })
    }
    return (
        <div id="map" style={mapStyle(40,25)}>
            {makeImages()}
            {pixelDisplay}
        </div>
    )
}

class Room {
    left:number
    top:number
    width:number
    height:number
    north: number[];
    south: number[];
    east: number[];
    west: number[];
    room: number[][] = [
        [8,8,8,8,8,8,8,8,8,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,9,9,9,9,9,9,9,9,8],
        [8,8,8,8,8,8,8,8,8,8],
    ];
    constructor(startLeft:number,startTop:number, width:number, height:number,northDoor:number[],southDoor:number[],eastDoor:number[],westDoor:number[]) {
        this.north = northDoor;
        this.south = southDoor;
        this.east = eastDoor;
        this.west = westDoor;
        this.left=startLeft;
        this.top=startTop;
        this.width = width;
        this.height = height;
        this.assignEntrances();
    }

    private assignEntrances () {
        for (var i:number = this.north[0]; i < this.north[1]; i++) {
            this.room[0][i] = 9
        }
        for (var i = this.south[0]; i < this.south[1]; i++) {
            this.room[9][i] = 9
        }
        for (var i = this.east[0]; i < this.east[1]; i++) {
            this.room[i][9] = 9
        }
        for (var i = this.west[0]; i < this.west[1]; i++) {
            this.room[i][0] = 9
        }
    }
}