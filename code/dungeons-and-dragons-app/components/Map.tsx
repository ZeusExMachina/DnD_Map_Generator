import React from "react";


interface mapProps {
    images: JSX.Element[]
}

export default function map(props: mapProps) {

    const mapStyle = function (width: number, height: number) {
        return {
            margin: 'auto',
            display: 'grid',
            gridTemplateColumns: 'repeat(' + width + ',max-content)',
            gridTemplateRows: 'repeat(' + height + ',max-content)',
            gridGap: '0px'

        }
    }

    var mapGrid: number[][] = [
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    ]

    var room: number[][] = [
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
    ]

    //===
    //Copy and paste predefined rooms
    // const room1 : number[][] = [ //enterance
    //     [10,10,10,10,10,10,10,10,10,10,10,10],
    //     [10,10,10,10,10,10,10,10,1,8,8,8],
    //     [8,8,8,8,8,8,8,8,8,9,9,8],
    //     [9,9,9,9,9,9,9,9,9,9,9,8],
    //     [9,9,9,9,9,9,9,9,9,8,9,9],
    //     [8,8,8,8,8,8,9,8,8,9,9,8],
    //     [10,10,10,10,8,9,9,9,9,9,9,8],
    //     [10,10,10,10,8,9,9,9,9,9,9,8],
    //     [10,10,10,10,8,9,8,8,8,8,8,8]
    // ]

    // const room2 : number[][] = [
    //     [10,10,8,8,8,8,8,8,8,8,8,10],
    //     [10,10,8,9,9,9,9,9,9,9,8,10],
    //     [10,10,8,9,9,9,9,9,9,9,8,10],
    //     [8,8,8,9,9,9,9,9,9,9,8,10],
    //     [9,9,9,9,9,9,9,9,9,9,8,8],
    //     [8,8,8,9,9,9,9,9,9,9,9,9],
    //     [10,10,8,9,9,9,9,9,9,9,9,9],
    //     [10,10,8,9,9,9,9,9,9,9,8,8],
    //     [10,10,8,8,8,9,9,8,8,8,8,10],
    // ]

    // const room3 : number[][] = [
    //     [10,10,10,10,10,10,10,10],
    //     [10,10,10,10,8,8,8,8],
    //     [8,8,8,8,8,9,9,8],
    //     [8,9,9,9,9,9,9,8],
    //     [8,9,9,9,9,9,9,8],
    //     [9,9,8,8,8,9,9,8],
    //     [9,9,8,10,8,9,9,8],
    //     [8,8,8,10,8,9,9,8],
    //     [10,10,10,10,8,8,8,8]
    // ]

    // const room4 : number[][] = [ //exit
    //     [10,8,8,8,8,8,8,10],
    //     [10,8,9,9,9,9,8,10],
    //     [10,8,9,9,9,9,8,10],
    //     [10,8,9,8,8,8,8,10],
    // ]

    // const room5 : number[][] = [
    //     [10, 10, 10, 9, 10, 10, 10, 10],
    //     [10, 9, 9, 9, 9, 9, 9, 10],
    //     [10, 9, 9, 9, 9, 10, 9, 10],
    //     [10, 9, 9, 9, 9, 10, 10, 10],
    //     [10, 10, 10, 10, 9, 10, 10, 10]
    // ]

    // const room6 : number[][] = [
    //     [10,10,10,10,8,9,8,10,10,10,10,10],
    //     [10,8,8,8,8,9,8,8,8,8,10,10],
    //     [10,8,9,9,9,9,9,9,9,8,10,10],
    //     [10,8,9,8,9,9,9,8,9,8,10,10],
    //     [10,8,9,9,9,9,9,9,9,8,10,10],
    //     [10,8,8,8,8,8,8,8,8,8,10,10],
    //     [10,10,10,10,10,10,10,10,10,10,10,10],
    // ]

    // const room7 : number[][] = [ //Prison Cells     12x9
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
    // ]

    // const room8 : number[][] = [ //15x16, incomplete. big open room.
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    //     [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    // ]

    // const room9 : number[][] = [ //Boss chamber
    //     [10,10,10,10,10,10,10,10,8,9,8,10,10],
    //     [10,10,10,10,10,10,10,10,8,9,8,10,10],
    //     [8,8,8,8,8,8,10,10,8,9,8,10,10],
    //     [9,9,9,9,9,8,10,10,8,9,8,8,8],
    //     [8,8,8,8,9,8,8,8,8,9,9,9,8],
    //     [10,10,10,8,9,9,9,9,9,9,9,9,8],
    //     [10,8,8,8,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,9,9,8],
    //     [10,8,9,9,9,9,9,9,9,9,8,8,8],
    //     [10,8,8,8,8,9,9,9,9,8,8,10,10],
    //     [10,10,10,8,8,8,8,8,8,8,10,10,10],
    //     [10,10,10,10,10,10,10,10,10,10,10,10,10],
    //     [10,10,10,10,10,10,10,10,10,10,10,10,10]
    // ]
    // //===

    function addRoom(startLeft: number, startTop: number, width: number, height: number, room: number[][]) {
        var roomLeft = 0;
        var roomTop = 0;
        for (var i = startTop; i < height; i++) {
            for (var j = startLeft; j < width; j++) {
                mapGrid[i][j] = room[roomTop][roomLeft];
                roomLeft++;
            }
            roomLeft = 0;
            roomTop++;
        }
    }
    var rooms: Room[] = [(new Room(0, 0, 10, 10, [0, 0], [0, 0], [0, 0], [0, 0],'NULL'))]

    var roomX = 0;
    var roomY = 0;
    var roomIndex = 0;

    var exitX = 30
    var exitY = 10
    /* Generates the Path */
    while (roomX <= exitX && roomY <= exitY) {
        var origX = roomX;
        var origY = roomY;
        var southEntrance = [0,0]
        var eastEntrance = [0,0]
        var westEntrance = [0,0]
        var northEntrance = [0,0]
        var entrance = 'NULL'
        if(roomX != exitX && roomY != exitY) {
            if(Math.random() >= 0.5) {
                roomX += 10;
                eastEntrance = [4,6]
                entrance = 'EAST'
            } else {
                roomY += 10;
                southEntrance = [4,6]
                entrance = 'SOUTH'
            }
        } else {
            if(roomX == exitX && roomY == exitY) {
                roomY+=10;
            } else if(roomX == exitX) {
                roomY +=10;
                southEntrance = [4,6]
                entrance = 'SOUTH'
            } else {
                roomX +=10;
                eastEntrance = [4,6]
                entrance = 'EAST'
            }
        }
        switch(rooms[roomIndex].entrance) {
            case 'SOUTH':
                northEntrance = [4,6]
                break;
            case 'EAST':
                westEntrance = [4,6]
                break;
        }
        var roomToAdd:Room = new Room(origX,origY,origX+10,origY+10,northEntrance,southEntrance,eastEntrance,westEntrance,entrance)
        roomIndex++
        rooms.splice(roomIndex,0,roomToAdd)
    }
    for(var i = 0; i <rooms.length; i++) {
        var currentRoom:Room = rooms[i]
        addRoom(currentRoom.left,currentRoom.top,currentRoom.width,currentRoom.height,currentRoom.room)
    }
    // var roomID:String[] = [];

    // rooms.forEach(function (e1: Room, index: number) {
    //     addRoom(e1.left, e1.top, e1.width, e1.height, e1.room)
    // })
    // rooms.forEach(function (e1: Room, index: number) {
    //     roomID.push(e1.entrance)
    // })

    let mapGridTest: number[][] = [
        [10,10,10,10,10,10],
        [10,10,10,10,10,10],
        [10,10,10,10,10,10],
        [10,10,10,10,10,10],
    ]

    var x = 1;
    var y = 0;
    mapGridTest[0][0] = 9;
    var n = 0
    while(x < 6 && y < 4) {
        mapGridTest[y][x] = 9;
        if(x != 5 && y != 3) {
            if(Math.random() > 0.5) {
                x++;
            } else {
                y++;
            }
        } else {
            if(x == 5) {
                y++;
            } else {
                x++;
            }
        }
        
        n++;
    }
    let pixelDisplay: JSX.Element[][] = []
    function makeImages() {
        mapGrid.forEach(function (e1: number[], index: number) {
            //  row
            let row: JSX.Element[] = []
            e1.forEach(function (e2: number, index2: number) {
                //  col
                // numbers should reference a tile in images
                const imagelink = props.images[e2]
                row.push(imagelink)
            })
            pixelDisplay.push(row)
        })
    }
    let pixelDisplayTest: JSX.Element[][] = []
    function makeImagesTest() {
        mapGridTest.forEach(function (e1: number[], index: number) {
            //  row
            let row: JSX.Element[] = []
            e1.forEach(function (e2: number, index2: number) {
                //  col
                // numbers should reference a tile in images
                const imagelink = props.images[e2]
                row.push(imagelink)
            })
            pixelDisplayTest.push(row)
        })
    }
    return (
        <div id="map" style={mapStyle(40, 25)}>

            {makeImages()}
            {pixelDisplay}
            {/* {roomID} */}
        </div>
    )
}

class Room {
    left: number
    top: number
    width: number
    height: number
    north: number[];
    south: number[];
    east: number[];
    west: number[];
    room: number[][] = [
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 9, 9, 9, 9, 9, 9, 9, 9, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
    ];
    entrance: String
    constructor(startLeft: number, startTop: number, width: number, height: number, northDoor: number[], southDoor: number[], eastDoor: number[], westDoor: number[], originalEntrance: String) {
        this.north = northDoor;
        this.south = southDoor;
        this.east = eastDoor;
        this.west = westDoor;
        this.left = startLeft;
        this.top = startTop;
        this.width = width;
        this.height = height;
        this.assignEntrances();
        this.entrance = originalEntrance
    }

    private assignEntrances() {
        for (var i: number = this.north[0]; i < this.north[1]; i++) {
            this.room[0][i] = 9
        }
        for (var i = this.south[0]; i < this.south[1]; i++) {
            this.room[9][i] = 9
        }
        for (var i = this.east[0]; i < this.east[1]; i++) {
            this.room[i][9] = 9
        }
        for (var i = this.west[0]; i < this.west[1]; i++) {
            this.room[i][0] = 9
        }
    }
}